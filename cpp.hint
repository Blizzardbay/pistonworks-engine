// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define PW_GLEW_H
#define PW_COMMON_API
#define PW_CONTROL_API
#define PW_STRUCTURES_API
#define PW_ERROR_API
#define INTERNAL_DATA_API
#define PW_NAMESPACE_SRT namespace pw {
#define PW_NAMESPACE_END }
#define CM_NAMESPACE_SRT namespace cm {
#define CM_NAMESPACE_END }
#define CO_NAMESPACE_SRT namespace co {
#define CO_NAMESPACE_END }
#define ST_NAMESPACE_SRT namespace st {
#define ST_NAMESPACE_END }
#define ER_NAMESPACE_SRT namespace er {
#define ER_NAMESPACE_END }
#define PW_DEBUG_MODE
#define ACCESSOR
#define MUTATOR
#define LOADER
#define CORE
#define ERROR_HANDLE
#define UTILITY
#define CLASS_FUNCTION
#define USER_INTERACTION 
#define NO_USER_INTERACTION
#define ACCESSORS
#define MUTATORS
#define LET_CPP_IMPLEMENT
#define ROOT_FILE
#define ROOT_STRUCTURE
#define PW_APP_NAME L"Pistonworks Window"
#define PW_SRD_PTR(type)									std::shared_ptr<type>
#define PW_UNI_PTR(type)									std::unique_ptr<type>
#define PW_DUNI_PTR(type, deleter)							std::unique_ptr<type, deleter>
#define TO_INT32(x)											static_cast<int32_t>(x)
#define TO_UINT32(x)										static_cast<uint32_t >(x)
#define TO_INT64(x)											static_cast<int64_t>(x)
#define TO_UINT64(x)										static_cast<uint64_t>(x)
#define VARIABLE_NAME(x)									static_cast<const wchar_t*>(#x)
#define OFF(x)												(x + 1)
#define COMPLEX_FUNCTION_1(x_args)							std::function<void(x_args)>
#define COMPLEX_FUNCTION_2(x_args, y_args)					std::function<void(x_args, y_args)>
#define COMPLEX_FUNCTION_3(x_args, y_args, z_args)			std::function<void(x_args, y_args, z_args)>
#define COMPLEX_FUNCTION_4(x_args, y_args, z_args, a_args)	std::function<void(x_args, y_args, z_args, a_args)>
#define PRINT_MSG(from, msg, msg_type) { pw::co::cn::Console_Manip::Print_Console(std::move(from), std::move(msg), std::move(msg_type), false); }
#define PRINT_BLOCK(from, msg, msg_type) {  pw::co::cn::Console_Manip::Print_Console(L"", L"---------------------------------------------------------", COUT_MSG, true);  pw::co::cn::Console_Manip::Print_Console(std::move(from), std::move(msg), std::move(msg_type), false);  pw::co::cn::Console_Manip::Print_Console(L"", L"---------------------------------------------------------", COUT_MSG, true); }
#define PW_GLFW_VOID_CALL(funct)				{ funct; pw::er::Engine_Error::PW_LINE_ = __LINE__; pw::er::Engine_Error::PW_FILE_ = TO_WSTRING(__FILE__); }
#define PW_GLFW_CALL(funct)						{ pw::er::Engine_Error::PW_GLFW_Handle(funct, __LINE__, TO_WSTRING(__FILE__)); }
#define PW_GL_VOID_CALL(funct, handle_type)		{ funct; pw::er::Engine_Error::PW_GL_VOID_Handle(glGetError(), __LINE__, TO_WSTRING(__FILE__),handle_type); }
#define PW_FI_VOID_CALL(funct)					{ funct; pw::er::Engine_Error::PW_LINE_ = __LINE__; pw::er::Engine_Error::PW_FILE_ = TO_WSTRING(__FILE__); }
#define PW_FI_VOID_CALL_C(funct)				{ funct; pw::er::Engine_Error::PW_LINE_ = __LINE__; pw::er::Engine_Error::PW_FILE_ = TO_WSTRING(__FILE__); funct }
#define PW_GL_CALL(funct)						{ pw::er::Engine_Error::PW_GL_Handle(funct, __LINE__, TO_WSTRING(__FILE__)); }
#define PW_FT_CALL(funct)						{ pw::er::Engine_Error::PW_FT_Handle(funct, __LINE__, TO_WSTRING(__FILE__));}

#define PW_PRINT_ERROR_1(sender, msg) {	pw::er::Engine_Error::PW_Print_Error(std::move(TO_WSTRING(sender)), std::move(TO_WSTRING(msg)), __LINE__, TO_WSTRING(__FILE__)); }																																				    
#define PW_PRINT_ERROR_2(sender, msg, function)	{ pw::er::Engine_Error::PW_Print_Error(std::move(TO_WSTRING(sender)), std::move(TO_WSTRING(msg)), __LINE__, TO_WSTRING(__FILE__), TO_WSTRING(function)); }

#define PW_PRINT_ERROR( ... ) VA_SELECT( PW_PRINT_ERROR, __VA_ARGS__ )

#define MEMORY
#define CN_NAMESPACE_SRT namespace cn {
#define CN_NAMESPACE_END }
#define CONSOLE
