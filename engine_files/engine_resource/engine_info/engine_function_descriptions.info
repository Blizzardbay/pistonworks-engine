//////////////////////////////////
// Classes
// Wraps the type_info structure for easy use
// //////////////////////////////////////////////////
// PW_COMMON_API Struct: pw::co::Destroy_GLFW
// //////////////////////////////////////////////////
// Purpose:
//  Destroys GLFW though a function operator call.
// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  Function: Engine_Constant::To_WChar
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a const char* to a wchar_t*, must be
			//  deallocated.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const char* p_msg;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::To_Char
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a const wchar_t* to a char*, must be
			//  deallocated.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* p_msg;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::Evaluate_TWStr
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a char string to a wchar_t string.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) std::any p_str;
			// Purpose:
			//  The message to be converted. Must be a string
			//  type. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::To_WString
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a const char* to a std::wstring.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const char* p_msg;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::To_WString
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a std::string to a std::wstring.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) std::string p_msg;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::Evaluate_TStr
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a wchar_t string to a char string.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) std::any p_str;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::To_String
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a const wchar_t* to a std::string.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const char* p_msg;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::To_String
			// //////////////////////////////////////////////////
			// Purpose:
			//  Converts a std::wstring to a std::string.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) std::wstring p_msg;
			// Purpose:
			//  The message to be converted. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Constant::Calc_Elapsed_Time
			// //////////////////////////////////////////////////
			// Purpose: Sets the windows fps for the engine.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) GLFWwindow* main_window;
			// Purpose: 
			//  It is the main window of the application
			//  that is used to set the window's title
			//  fps.
			// //////////////////////////////////////////////////
						// //////////////////////////////////////////////////
			//  Function: Engine_Constant::Wait
			// //////////////////////////////////////////////////
			// Purpose:
			//  The engine holds the fps back for
			//  consistent fps.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
//////////////////////////////////
		// Classes

		// //////////////////////////////////////////////////
		// Class Name: pw::er::Engine_Error
		// //////////////////////////////////////////////////
		// Purpose:
		//  For handling error
		//  within parts of the engine.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_Print_Error
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Prints a custom error msg.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const pw::er::Warning_Error& p_error;
			// Purpose: 
			//  The error to be printed.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_Print_Error
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Prints a custom error msg.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const pw::er::Severe_Error& p_error;
			// Purpose: 
			//  The error to be printed.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_GLFW_Callback_Handle
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Prints error msg's sent to the function from
			//  glfw.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) int32_t&& p_result;
			// Purpose: 
			//  The result of the function to be evaluated.
			// (2) std::wstring p_description;
			// Purpose: 
			//  The description of the error.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_GLFW_Handle
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Takes a result and finds if it is an error or not
			//  .
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) const int32_t&& p_result;
			// Purpose: 
			//  The result of the function to be evaluated.
			// (2) const int32_t&& p_line;
			// Purpose: 
			//  The line the error was on.
			// (3) std::wstring p_file;
			// Purpose: 
			//  The file the error happened in.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_GL_VOID_Handle
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Finds an error from a opengl function with a void
			//  return.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) const GLenum&& p_result;
			// Purpose: 
			//  The result of the function to be evaluated.
			// (2) int32_t&& p_line;
			// Purpose: 
			//  The line the error was on.
			// (3) std::wstring p_file;
			// Purpose: 
			//  The file the error happened in.
			// (4) bool&& p_handle_type;
			// Purpose:
			//  Should the error be printed or not.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_FI_Callback_Handle
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Prints error msg's sent to the function from FI.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) FREE_IMAGE_FORMAT&& p_result;
			// Purpose: 
			//  The result of the function to be evaluated.
			// (2) std::wstring p_description;
			// Purpose: 
			//  The description of the error.
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_GL_Handle
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Interprets a result form a opengl function.
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) const GLenum&& p_result;
			// Purpose: 
			//  The result of the function to be evaluated.
			// (2) const int32_t&& p_line;
			// Purpose: 
			//  The line the error was on.
			// (3) std::wstring p_file;
			// Purpose: 
			//  The file the error happened in.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Error::PW_FT_Handle
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Handles possible font loading issues.
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) const FT_Error&& result;
			// Purpose: 
			//  The result of the function to be evaluated.
			// (2) const int32_t&& line;
			// Purpose: 
			//  The line the error was on.
			// (3) std::wstring file;
			// Purpose: 
			//  The file the error happened in.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Mesh::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes and frees the memory of the mesh.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  Function: Mesh::Draw
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Draws the mesh.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Mesh::operator==
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Allows for the testing of a mesh's likeness to
			//  another.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const Mesh& rhs;
			// Purpose:
			//  The other mesh to be compared to this mesh.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Mesh::operator=
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Handles the copying of one mesh to another.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const Mesh& rhs;
			// Purpose:
			//  The other mesh to be copied to this mesh.
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  : Mesh::~Mesh
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deallocates memory contained by the mesh.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Mesh::Mesh
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a mesh. A mesh's data may be changed at
			//  runtime.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) const ID_Vertex_Data* vertices;
			// Purpose: 
			//  A pointer to all of the vertices in the mesh. 
			// (2) const uint16_t vertex_count;
			// Purpose: 
			//  The total count of the vertices.
			// (3) const uint32_t* indices;
			// Purpose: 
			//  The indices of the mesh. Used for texture
			//  coordinates. 
			// (4) const uint16_t indice_count;
			// Purpose:
			//  The total count of the indices. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Mesh::Mesh
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a mesh. A mesh's data may be changed at
			//  runtime.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) ID_Vertex_Data* vertices;
			// Purpose: 
			//  A pointer to all of the vertices in the mesh. 
			// (2) const uint16_t vertex_count;
			// Purpose: 
			//  The total count of the vertices.
			// (3) uint32_t* indices;
			// Purpose: 
			//  The indices of the mesh. Used for texture
			//  coordinates. 
			// (4) const uint16_t indice_count;
			// Purpose:
			//  The total count of the indices. 
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  : Mesh::Mesh
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates an empty mesh. Do not draw.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
		//  Class: pw::st::Mesh
		// //////////////////////////////////////////////////
		// Purpose:
		//  Creates and send the vertex data to the shader. 
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// INTERNAL_DATA_API CLASS FUNCTION: ID_Vertex_Data::~ID_Vertex_Data
			// //////////////////////////////////////////////////
			// Purpose:
			//  Clears allocated vertex data. 
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// INTERNAL_DATA_API CLASS FUNCTION: ID_Vertex_Data::ID_Vertex_Data
			// //////////////////////////////////////////////////
			// Purpose:
			//  Initializes vertex data using user given values.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// INTERNAL_DATA_API CLASS FUNCTION: ID_Vertex_Data::ID_Vertex_Data
			// //////////////////////////////////////////////////
			// Purpose:
			//  Initializes empty vertex data.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class: pw::st::ID_Vertex_Data
		// //////////////////////////////////////////////////
		// Purpose:
		//  Holds the data for each vertex in the model. 
		// //////////////////////////////////////////////////
//////////////////////////////////
		// Classes

		// //////////////////////////////////////////////////
		//  Class Name: pw::er::Error_Log
		// //////////////////////////////////////////////////
		// Purpose:
		//  Logs errors into a dump file.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  Function: Error_Log::Dump_Log
			// //////////////////////////////////////////////////
			// Purpose:
			//  Dumps the error to a newly created file. This
			//  file contains all error information. It returns 
			//  false if it cannot find or dump the contents into
			//  a file.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* msg;
			// Purpose: 
			//  The console log to be logged.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  Function: Error_Log::Dump_Log
			// //////////////////////////////////////////////////
			// Purpose:
			//  Dumps the error to a newly created file. This
			//  file contains all error information. It returns 
			//  false if it cannot find or dump the contents into
			//  a file.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) er::Warning_Error&& p_error;
			// Purpose:
			//  The error that is being logged.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			// Function: Error_Log::Dump_Log
			// //////////////////////////////////////////////////
			// Purpose:
			//  Dumps the error to a newly created file. This
			//  file contains all error information. It returns 
			//  false if it cannot find or dump the contents into
			//  a file.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) er::Severe_Error&& p_error;
			// Purpose:
			//  The error that is being logged.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		// PW_ERROR_API Class: pw::er::Engine_Exception
		// //////////////////////////////////////////////////
		// Purpose:
		//  Stores information for the current exception line
		//  since C++ does not have this as a built in
		//  function at runtime without a break point.
		// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
		// PW_ERROR_API Class: pw::er::Warning_Error
		// //////////////////////////////////////////////////
		// Purpose:
		//  This is a non-fatal error that is a failure of a
		//  non-essential function or functionality.
		// //////////////////////////////////////////////////
			
			// //////////////////////////////////////////////////
			//  Function: Warning_Error::Warning_Error
			// //////////////////////////////////////////////////
			// Purpose:
			//  Creates a console to be thrown.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) std::wstring p_from;
			// Purpose:
			//  Where is the error from.
			// (2) std::wstring p_msg;
			// Purpose:
			//  The msg or error purpose.
			// (3) uint32_t p_line;
			// Purpose:
			//  The line where the error occurred. 
			// (4) std::wstring p_file;
			// Purpose:
			//  The file in which the error occurred.
			// (5) std::wstring p_function;
			// Purpose:
			//  The function that threw the error.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Warning_Error::~Warning_Error
			// //////////////////////////////////////////////////
			// Purpose:
			//  Destroys the error.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		// PW_ERROR_API Class: pw::er::Severe_Error
		// //////////////////////////////////////////////////
		// Purpose:
		//  This is a fatal error that is a failure of a
		//  essential function or functionality. As soon as
		//  the engine gets the message it will exit. Will 
		//  also print out a log file.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Severe_Error::Severe_Error
			// //////////////////////////////////////////////////
			// Purpose:
			//  Creates a console to be thrown.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) std::wstring p_from;
			// Purpose:
			//  Where is the error from.
			// (2) std::wstring p_msg;
			// Purpose:
			//  The msg or error purpose.
			// (3) uint32_t p_line;
			// Purpose:
			//  The line where the error occurred. 
			// (4) std::wstring p_file;
			// Purpose:
			//  The file in which the error occurred.
			// (5) std::wstring p_function;
			// Purpose:
			//  The function that threw the error.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Severe_Error::~Severe_Error
			// //////////////////////////////////////////////////
			// Purpose:
			//  Destroys the error.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////	
// //////////////////////////////////////////////////
	// PW_GLOBAL_API Class: pw::Engine_Memory
	// //////////////////////////////////////////////////
	// Purpose:
	//  Records and stores information about the
	//  engine's memory use. 
	// //////////////////////////////////////////////////	// //////////////////////////////////////////////////
		//  struct: pw::Engine_Memory::Memory
		// //////////////////////////////////////////////////
		// Purpose:
		//  Stores memory, memory blocks, memory size and
		//  memory type.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
//  Function: Memory::Memory
// //////////////////////////////////////////////////
// Purpose:
//  Creates a memory object to hold info about the
//  registered memory.
// //////////////////////////////////////////////////
// Parameters: 4
// (1) void* p_memory;
// Purpose:
//  A pointer to a set of memory blocks.   
// (2) const size_t&& p_blocks;
// Purpose:
//  The amount of blocks the given memory has.
// (3) const size_t&& p_byte_size;
// Purpose:
//  The amount of bytes for 1 block of memory.  
// (4) std::string&& p_type_name;
// Purpose:
//  The type of data being stored. 
// //////////////////////////////////////////////////	// //////////////////////////////////////////////////
			//  Function: Memory::Memory
			// //////////////////////////////////////////////////
			// Purpose:
			//  Copys memory data into another structure.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const Memory& rhs;
			// Purpose:
			//  The data to copy into the structure. 
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  Function: Memory::operator=
			// //////////////////////////////////////////////////
			// Purpose:
			//  Copys memory data into another structure.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const Memory& rhs;
			// Purpose:
			//  The data to copy into the structure. 
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Function: Engine_Memory::Allocate
		// //////////////////////////////////////////////////
		// Purpose:
		//  Returns a newly allocated structure of the given
		//  type.
		// //////////////////////////////////////////////////
		// Parameters: 1
		// (1) size_t p_count = 1;
		// Purpose:
		//  The amount of structures to allocate.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Function: Engine_Memory::Allocate
		// //////////////////////////////////////////////////
		// Purpose:
		//  Returns a newly allocated structure of the given
		//  type. Uses a construtor instead of a default 
		//  constructor.
		// //////////////////////////////////////////////////
		// Parameters: 1
		// (1) no_default&&... constructor_arguments;
		// Purpose:
		//  The arguments for the given structure constructor
		//  type.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Function: Engine_Memory::Allocate
		// //////////////////////////////////////////////////
		// Purpose:
		//  Returns a newly allocated structure of the given
		//  type. Uses a copy constructor instead of the 
		//  default constructor.
		// //////////////////////////////////////////////////
		// Parameters: 2
		// (1) type&& copy;
		// Purpose:
		//  A copy to be used to initilize the structure.
		// (2) size_t p_count = 1;
		// Purpose:
		//  The amount of structures to allocate.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Function: Engine_Memory::Deallocate
		// //////////////////////////////////////////////////
		// Purpose:
		//  Deletes the allocated memory of the given type.
		//  If it is memory pointed to by a shared pointer
		//  the amount of memory the structure takes up is
		//  deducted from the total engine count since the
		//  shared pointer takes care of this automatically.
		// //////////////////////////////////////////////////
		// Parameters: 2
		// (1) type* p_memory;
		// Purpose:
		//  The memory to be deleted.
		// (2) bool shared_ptr = false;
		// Purpose:
		//  Is this memory pointed to by a shared pointer.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Function: Engine_Memory::Deallocate_All
		// //////////////////////////////////////////////////
		// Purpose:
		//  Deletes all allocated memory recorded by the
		//  engine.
		// //////////////////////////////////////////////////
		// Parameters: NONE
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Function: Engine_Memory::Deallocate_All
		// //////////////////////////////////////////////////
		// Purpose:
		//  Given an amount of bytes it returns the human
		//  readable value of said bytes.
		// //////////////////////////////////////////////////
		// Parameters: 1
		// (1) const uint64_t& p_bytes;
		// Purpose:
		//  The amount of bytes to be read.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			// PW_CONSOLE_API Class: pw::co::cn::Console_Error
			// //////////////////////////////////////////////////
			// Purpose:
			//  To hold a windows get error function.
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
				//  Function: Console_Error:Windows_Last_Error 
				// //////////////////////////////////////////////////
				// Purpose:
				//  Returns the last windows error detected by the 
				//  system. If it does not get an error it returns an
				//  empty std::wstring(). If it gets a function error
				//  it will print so.  If the format function gets an
				//  error, then the function will return a error msg
				//  for the format msg and give any other possible
				//  error information about the original error.
				// //////////////////////////////////////////////////
				// Parameters: NONE
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// PW_CONSOLE_API Enum: pw::co::cn::Win_Text_Color
			// //////////////////////////////////////////////////
			// Purpose:
			//  Windows consoles need very specific color number
			//  inputs. Using a enum structure makes this very
			//	easy to navigate.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// PW_CONSOLE_API Enum: pw::co::cn::Win_Backaround_Color
			// //////////////////////////////////////////////////
			// Purpose:
			//  Like the console text color, the background text
			//  color also needs a specific color enum value in
			//  order for the text to be colored correctly.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// PW_CONSOLE_API Class: pw::co::cn::Console_Color
			// //////////////////////////////////////////////////
			// Purpose:
			//  A simple windows API color wrapper.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: pw::co::cn::Console_Color
				// //////////////////////////////////////////////////
				// Purpose:
				//  Initializes an empty console_color structure.
				// //////////////////////////////////////////////////
				// Parameters: NONE
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: pw::co::cn::Console_Color
				// //////////////////////////////////////////////////
				// Purpose:
				//  Initializes an empty console color structure.
				// //////////////////////////////////////////////////
				// Parameters: 2
				// (1) Win_Text_Color text_color;
				// Purpose:
				//  The color of the text.
				// (2)
				// Purpose:
				//  The color of the background.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: pw::co::cn::~Console_Color
				// //////////////////////////////////////////////////
				// Purpose:
				//  Deallocates memory of the color structure.
				// //////////////////////////////////////////////////
				// Parameters: NONE
				// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			// PW_CONSOLE_API Class: pw::co::cn::Console_Manip
			// //////////////////////////////////////////////////
			// Purpose:
			//  The control structure for the debug console.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				// PW_CONSOLE_API Enum: pw::co::cn::Console_Manip::Msg_Types
				// //////////////////////////////////////////////////
				// Purpose:
				//  The different types of msg's that the console can
				//  be sent.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Set_Up_Console
				// //////////////////////////////////////////////////
				// Purpose:
				//  Initializes the console window for use. Note that
				//  in release mode the console will not appear.
				// //////////////////////////////////////////////////
				// Parameters: NONE
				// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
				//  Function: Console_Manip::Resize
				// //////////////////////////////////////////////////
				// Purpose:
				//  Resizes the console window on a character size
				//  basis.
				// //////////////////////////////////////////////////
				// Parameters: 2
				// (1) uint32_t&& size_x;
				// Purpose:
				//  The size in characters the x-axis will extend.
				//  Direction: Right
				// (2) uint32_t&& size_y;
				// Purpose:
				//  The size in characters the y-axis will extend.
				//  Direction: Down
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_Screen
				// //////////////////////////////////////////////////
				// Purpose:
				//  Draws a default built in screen template for the
				//  console window to give information from.
				// //////////////////////////////////////////////////
				// Parameters: NONE
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Print_Console
				// //////////////////////////////////////////////////
				// Purpose:
				//  Prints the msg to the console along with time,
				//  sender and msg type information. 
				// //////////////////////////////////////////////////
				// Parameters: 3
				// (1) wchar_t* from;
				// Purpose:
				//  The function or class sending the msg to the
				//  console.
				// (2) wchar_t* msg;
				// Purpose:
				//  The msg being printed to the console.
				// (3) uint16_t&& line;
				// Purpose:
				//  The line to print the data on.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Print_Console
				// //////////////////////////////////////////////////
				// Purpose:
				//  Prints the msg to the console along with time,
				//  sender and msg type information. 
				// //////////////////////////////////////////////////
				// Parameters: 4
				// (1) wchar_t* from;
				// Purpose:
				//  The function or class sending the msg to the
				//  console.
				// (2) wchar_t* msg;
				// Purpose:
				//  The msg being printed to the console.
				// (3) Msg_Types&& msg_type;
				// Purpose:
				//  The type of msg that is being printed.
				// (4) bool&& block_msg;
				// Purpose:
				//  Is this msg a block or not.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Clear_Console
				// //////////////////////////////////////////////////
				// Purpose:
				//  Clears the text portion of the console to black.
				// //////////////////////////////////////////////////
				// Parameters: NONE
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_WChar
				// //////////////////////////////////////////////////
				// Purpose:
				//  Prints the character to the console screen. 
				// //////////////////////////////////////////////////
				// Parameters: 3
				// (1) COORD&& position;
				// Purpose:
				//  The position of the character to be printed to.
				// (2) const wchar_t&& character;
				// Purpose:
				//  The character being printed. Only one will be
				//  printed.
				// (3) Console_Color&& color;
				// Purpose:
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_Line
				// //////////////////////////////////////////////////
				// Purpose:
				//  Draws a line of colored characters between two 
				//  points. 
				// //////////////////////////////////////////////////
				// Parameters: 4
				// (1) COORD&& start;
				// Purpose:
				//  The position of the first point.
				// (2) COORD&& end;
				// Purpose:
				//  The position of the end point.
				// (3) const wchar_t&& character;
				// Purpose:
				//  The character being printed. 
				// (4) Console_Color&& color;
				// Purpose:
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_Rectangle_Vertical
				// //////////////////////////////////////////////////
				// Purpose:
				//  Draws a rectangle from its top left position. It
				//  draws the rectangle in vertical lines.
				// //////////////////////////////////////////////////
				// Parameters: 4
				// (1) COORD&& top_left;
				// Purpose:
				//  The position of the top left of the rectangle.
				// (2) COORD&& size;
				// Purpose:
				//  The size of the rectangle.
				// (3) const wchar_t&& character;
				// Purpose:
				//  The character being printed. 
				// (4) Console_Color&& color;
				// Purpose:
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_Rectangle_Horizontal
				// //////////////////////////////////////////////////
				// Purpose:
				//  Draws a rectangle from its top left position. It
				//  draws the rectangle in horizontal lines.
				// //////////////////////////////////////////////////
				// Parameters: 4
				// (1) COORD&& top_left;
				// Purpose:
				//  The position of the top left of the rectangle.
				// (2) COORD&& size;
				// Purpose:
				//  The size of the rectangle.
				// (3) const wchar_t&& character;
				// Purpose:
				//  The character being printed. 
				// (4) Console_Color&& color;
				// Purpose:
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Release_Console
				// //////////////////////////////////////////////////
				// Purpose:
				//  When the main program is done, delete the console
				//  .
				// //////////////////////////////////////////////////
				// Parameters: NONE
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_Line_Low
				// //////////////////////////////////////////////////
				// Purpose:
				//  Draws a line of colored characters between two 
				//  points. Draws it for "low" values.
				// //////////////////////////////////////////////////
				// Parameters: 4
				// (1) COORD&& start;
				// Purpose:
				//  The position of the first point.
				// (2) COORD&& end;
				// Purpose:
				//  The position of the end point.
				// (3) const wchar_t&& character;
				// Purpose:
				//  The character being printed. Draws only the first
				//  character. 
				// (4) Console_Color&& color;
				// Purpose:
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
				//  Function: Console_Manip::Draw_Line_High
				// //////////////////////////////////////////////////
				// Purpose:
				//  Draws a line of colored characters between two 
				//  points. Draws it for "high" values.
				// //////////////////////////////////////////////////
				// Parameters: 4
				// (1) COORD&& start;
				// Purpose:
				//  The position of the first point.
				// (2) COORD&& end;
				// Purpose:
				//  The position of the end point.
				// (3) const wchar_t&& character;
				// Purpose:
				//  The character being printed. Draws only the first
				//  character. 
				// (4) Console_Color&& color;
				// Purpose:
				//  The color of the character being printed.
				// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		// PW_CONTROL_API Class: pw::co::Engine_Control
		// //////////////////////////////////////////////////
		// Purpose:
		//  The main point of the application. Runs all
		//  events and calculations that take place in the
		//  engine.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// PW_CONTROL_API : Engine_Control::Engine_Control
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a instance of the engine.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// PW_CONTROL_API : Engine_Control::~Engine_Control
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes memory of the engine object.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Control::Initialize_Engine
			// //////////////////////////////////////////////////
			// Purpose: 
			//	Init engine make all of the default glew and glfw
			//	init's that are needed for the application to
			//	work. Also init's engine constants and runtime
			//	variables on top of shader control.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) const wchar_t* display_name;
			// Purpose: 
			//  The name of the application.
			// (2) int32_t display_width = 800;
			// Purpose: 
			//  The width of the application.
			// (3) int32_t display_height = 608;
			// Purpose: 
			//  The height of the application.
			// //////////////////////////////////////////////////
												  //int32_t display_width = 800, int32_t display_height = 608);
// //////////////////////////////////////////////////
			//  Function: Engine_Control::Run_Engine
			// //////////////////////////////////////////////////
			// Purpose:
			//	Runs the engine queue system and makes sure the
			//	runtime exceptions are handled and that runtime
			//	variables are up to date when used. Check/handles
			//	input and if the window should close.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Control::Release_Engine
			// //////////////////////////////////////////////////
			// Purpose:
			//	Destroys and deallocates all of the engine.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Control::Create_Callbacks
			// //////////////////////////////////////////////////
			// Purpose:
			//	Creates the input callbacks.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Control::Update_Engine_State
			// //////////////////////////////////////////////////
			// Purpose:
			//	Swaps opengl buffers.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Control::Should_Close
			// //////////////////////////////////////////////////
			// Purpose:
			//	Tests if the window should close or not.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		// Class Name: pw::ie::File_Loader
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  Loads different types of files
		//  and translates them to engine objects.
		// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			// Enum Name: pw::ie::File_Loader::Default_Colors
			// //////////////////////////////////////////////////																				 
			// Purpose:
			//  A structure that holds default color data.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  File_Loader::Initialize_Loader
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA File.
			//  Available types: PNG, BMP, JPEG
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) const wchar_t* file_name;
			// Purpose: 
			//  The name of the file to be loaded.
			// (2) bool engine_dir;
			// Purpose: 
			//  Should the engine use the game dir or the engine
			//  dir?
			// (3) const wchar_t* override_dir;
			// Purpose: 
			//  For single image animations it needs to be loaded
			//  as a texture from the animation directory.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  File_Loader::Load_Texture_File
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA File.
			//  Available types: PNG, BMP, JPEG
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) const wchar_t* file_name;
			// Purpose: 
			//  The name of the file to be loaded.
			// (2) bool engine_dir;
			// Purpose: 
			//  Should the engine use the game dir or the engine
			//  dir?
			// (3) const wchar_t* override_dir;
			// Purpose: 
			//  For single image animations it needs to be loaded
			//  as a texture from the animation directory.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  File_Loader::Load_Animation_File
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA File.
			//	Available types: GIF
			//  Note: You must create the model and finish
			//  initialization of the animation using the function
			//  Finish_Init.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* file_name;
			// Purpose: 
			//  The name of the file to be loaded.
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  File_Loader::Load_Icon
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA PNG.
			//	Available types: PNG
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* file_name;
			// Purpose: 
			//  The name of the file to be loaded.
			// (2) bool engine_dir;
			// Purpose: 
			//  Should the engine use the game dir or the engine
			//  dir?
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//   File_Loader::Unload_Icon
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Unload the icon after its use.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  File_Loader::Load_Project_File
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads the project file information for the queue.
			// //////////////////////////////////////////////////
			// Parameters: 7
			// (1) const wchar_t* file_location;
			// Purpose: 
			//  The location of the file to be loaded.
			// (2) std::wstring path_to_animations;
			// Purpose:
			//  The path to the animations within the game.
			// (3) std::wstring path_to_data;
			// Purpose:
			//  The path to the data within the game.
			// (4) std::wstring path_to_fonts;
			// Purpose:
			//  The path to the fonts within the game.
			// (5) std::wstring path_to_icon;
			// Purpose:
			//  The path to the icons within the game.
			// (6) std::wstring path_to_linker_files;
			// Purpose:
			//  The path to the linker_files within the game.
			// (7) std::wstring path_to_textures;
			// Purpose:
			//  The path to the textures within the game.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
			//  File_Loader::Load_Scene_File
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a scene.csv file with the scene's content
			//  information.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) const wchar_t* file_name;
			// Purpose: 
			//  The name of the scene file.
			// //////////////////////////////////////////////////

			// //////////////////////////////////////////////////
			//  File_Loader::Load_PNG
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA PNG.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* file_location;
			// Purpose: 
			//  The location of the file to be loaded.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  File_Loader::Load_BMP
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA BMP.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* file_location;
			// Purpose: 
			//  The location of the file to be loaded.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  File_Loader::Load_JPEG
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a 32 bit RGBA JPEG.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* file_location;
			// Purpose: 
			//  The location of the file to be loaded.
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		// PW_CONTROL_API Class Name: pw::Engine_Input
		// //////////////////////////////////////////////////
		// Purpose:
		//  For handling input
		//  events in the engine.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Engine_Input
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a input structure for the engine to use.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Engine_Input
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a input structure for the engine to use.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) std::map<PW_INPUT_TYPE, st::Keyboard_Event>* current_key_events;
			// Purpose: 
			//  A pointer to the current key events the
			//  structure any have.
			// (2) std::map<PW_INPUT_TYPE, std::map<PW_KEY_CODE, st::Keyboard_Event>>* key_events;
			// Purpose: 
			//  A pointer to the key events the structure any
			//  have.
			// Parameters: 2
			// (3) std::map<PW_INPUT_TYPE, st::Mouse_Event>* current_mouse_events;
			// Purpose: 
			//  A pointer to the current mouse events the
			//  structure any have.
			// (4) std::map<PW_INPUT_TYPE, std::map<PW_BUTTON_CODE, st::Mouse_Event>>* mouse_events;
			// Purpose: 
			//  A pointer to the mouse events the structure any
			//  have.
			// (5) std::map<PW_SCROLL_ACTION, st::Mouse_Event>* scroll_events;
			// Purpose: 
			//  A pointer to the scroll events the structure
			//  any have.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to delete all of the related members.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Handle_Keyboard
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Acts as a callback to a glfw input function.
			//  Note that this callback function requires default
			//  types.
			// //////////////////////////////////////////////////
			// Parameters: CALLBACK EXCEPTION
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Handle_Mouse_Movement
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Acts as a callback to a glfw input function.
			//  Note that this callback function requires default
			//  types.
			// //////////////////////////////////////////////////
			// Parameters: CALLBACK EXCEPTION
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Handle_Mouse_Button
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Acts as a callback to a glfw input function.
			//  Note that this callback function requires default
			//  types.
			// //////////////////////////////////////////////////
			// Parameters: CALLBACK EXCEPTION
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Handle_Resize
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Acts as a callback to a glfw input function.
			//  Note that this callback function requires default
			//  types.
			// //////////////////////////////////////////////////
			// Parameters: CALLBACK EXCEPTION
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Handle_Mouse_Scroll
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Acts as a callback to a glfw input function.
			//  Note that this callback function requires default
			//  types.
			// //////////////////////////////////////////////////
			// Parameters: CALLBACK EXCEPTION
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Poll_Active_Events
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Polls the input structure for the playing of any
			//  events that are active.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Create_Event_Keyboard
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a keyboard event for the input structure.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) PW_INPUT_TYPE action;
			// Purpose:
			//  The type of action that will trigger the event.
			//  GLFW_PRESS, GLFW_RELEASE, GLFW_REPEAT
			// (2) PW_KEY_CODE key_code;
			// Purpose:
			//  The key code of the key that will be pressed.
			//  Must be a ASCII standard keyboard code.
			// (3) std::shared_ptr<PW_FUNCTION> function_ptr;
			// Purpose:
			//  A pointer to the function that will be called on
			//  triggering of the event.
			// (4) bool only_play_once;
			// Purpose:
			//  Should this event only be played once or until
			//  its termination of action. Per frame basis.
			//  GLFW_PRESS ends with GLFW_RELEASE eta.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Create_Event_Mouse
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a mouse event for the input structure.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) PW_INPUT_TYPE action;
			// Purpose:
			//  The type of action that will trigger the event.
			//  GLFW_PRESS, GLFW_RELEASE, GLFW_REPEAT
			// (2) PW_BUTTON_CODE code;
			// Purpose:
			//  The GLFW button code.
			// (3) std::shared_ptr<PW_FUNCTION> function_ptr;
			// Purpose:
			//  A pointer to the function that will be called on
			//  triggering of the event.
			// (4) bool only_play_once;
			// Purpose:
			//  Should this event only be played once or until
			//  its termination of action. Per frame basis.
			//  GLFW_PRESS ends with GLFW_RELEASE eta.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Create_Event_Mouse
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a mouse event for the input structure.
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) PW_INPUT_TYPE action;
			// Purpose:
			//  The type of action that will trigger the event.
			//  In the case of the scroll wheel it can only be
			//  moved.
			//  GLFW_PRESS, GLFW_RELEASE, GLFW_REPEAT
			// (2) std::shared_ptr<PW_FUNCTION> function_ptr;
			// Purpose:
			//  A pointer to the function that will be called on
			//  triggering of the event.
			// (3) bool only_play_once;
			// Purpose:
			//  Should this event only be played once or until
			//  its termination of action. Per frame basis.
			//  GLFW_PRESS ends with GLFW_RELEASE eta.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Engine_Input::Register_Function
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Registers a function for use for once loaded 
			//  scene input.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::string function_name;
			// Purpose:
			//  The exact name of the function being registered.
			// (2) std::shared_ptr<PW_FUNCTION> function;
			// Purpose:
			//  A pointer to the function that will be called on
			//  triggering of the event.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		// PW_CONTROL_API Class Name: pw::Engine_Queue
		// //////////////////////////////////////////////////
		// Purpose:
		//  For handling all engine events and switching
		//  from editor mode to game state.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Pre_Queue
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Gets rendering information ready for scene render
			// .
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Run_Queue
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Runs the game engine rendering.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Refresh_Queue
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Refreshes the models in the queue after event.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Load_From_Dir
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a project from a directory.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const wchar_t* directory; 
			// Purpose:
			//  The directory in which the project file resides.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Print_Debug_Stats
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Prints out debug stats about the engine.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Release_Queue
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Clears the queue of all of its members.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  FUNCTION: Engine_Queue::Add_Scene
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Adds a scene to the total queue.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::wstring scene_name;
			// Purpose:
			//  The name of the scene to be added and loaded.
			// (2) bool set_current = false;
			// Purpose:
			//  Do we set this to the current scene.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class: pw::st::Animation
		// //////////////////////////////////////////////////
		// Purpose:
		//  A base class for holding a base layout of
		//  animations within the engine.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Animation::Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize animation information
			//  and data structures.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Animation::Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize animation information
			//  and data structures.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) float animation_length;
			// Purpose: 
			//  A time in seconds that the animation will last.
			// (2) uint32_t frame_count;
			// Purpose: 
			//  The total number of frames.
			// (3) uint32_t frame_size_x;
			// Purpose: 
			//  The size of one frame.
			// (4) ID_Vertex_Data* vertices;
			// Purpose:
			//  The vertices of the object.
			// (5) size_t vertices_count;
			// Purpose:
			//  The count of the vertices.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Animation::Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize animation information
			//  and data structures. Cannot be animated.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) float animation_length;
			// Purpose: 
			//  A time in seconds that the animation will last.
			// (2) uint32_t frame_count;
			// Purpose: 
			//  The total number of frames.
			// (3) uint32_t frame_size_x;
			// Purpose: 
			//  The size of one frame.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Animation::~Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to deallocate all animation information.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Animation::Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  A standard copy constructor for animation
			//  information.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const Animation& copy;
			// Purpose: 
			//  The animation to be copied from.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Animation::Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  A copy constructor for smart pointers.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const std::shared_ptr<Animation>& object;
			// Purpose: 
			//  The animation to be copied from.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Change_Frame
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to change the frame of the animation.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to delete the current animation and 
			//  all relevant data.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Finish_Init
			// //////////////////////////////////////////////////
			// Purpose: 
			//  If a animation is loaded from a gif or other file
			//  type, in the engine we cannot directly create a
			//  model of a known type for it so the work around
			//  is to init the animation after the model is
			//  created.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) ID_Vertex_Data* vertices;
			// Purpose:
			//  The vertices of the object.
			// (2) size_t vertices_count;
			// Purpose:
			//  The count of the vertices.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Advance_Frame
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Forces the animation to the next frame.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Start_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Makes the animation start to animate.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Stop_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Stops the animation from animating. Can still be
			//  advanced manually.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation::Reset_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to reset that animation back to its first
			//  frame.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Animation_Structure
		// //////////////////////////////////////////////////
		// Purpose:
		//  A structure that hold animation information.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation_Structure::Animation_Structure
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the class structures.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) std::shared_ptr<st::Animation> p_animation;
			// Purpose:
			//  Sets the structure so it only has a single
			//  animation.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation_Structure::Animation_Structure
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the animation structure.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::vector<std::shared_ptr<st::Animation>> p_animations;
			// Purpose:
			//  The animations to go into the structure.
			// (2) std::vector<std::wstring> p_animation_ids;
			// Purpose:
			//  The id's of the animation in the order of the
			//  animations.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Animation_Structure::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to delete the class structure's and models.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Camera
		// //////////////////////////////////////////////////
		// Purpose:
		//  Handles the camera function in the engine.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Camera::Update_Camera
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used  to Used to update the camera's current look
			//  / position.
			// //////////////////////////////////////////////////
			// Parameters: NONE 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Camera::Update_Projection
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to update the current projection matrix
			//  for displaying the information on screen.
			// //////////////////////////////////////////////////
			// Parameters: NONE 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Event_Base
		// //////////////////////////////////////////////////
		// Purpose:
		//  A base class that handles basic event information
		//  .
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Event_Base::Trigger_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Triggers the function that the event has on
			//  callback.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Event_Base::Find_Resolution
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Triggers the function that the event has on
			//  callback.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) PW_INPUT_TYPE trigger;
			// Purpose:
			//  Find the resolution to a trigger, this finds
			//  what the state the event would be in when it is
			//  not to be triggered. Not every event has a
			//  resolution. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Event
		// //////////////////////////////////////////////////
		// Purpose:
		//  A class to handle all different types of events.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// CLASS_FUNCTION Function: Event::Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Initializes all event variables, does not find
			//  trigger.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// CLASS_FUNCTION Function: Event::Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Initializes and finds a trigger for the event.
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) PW_INPUT_TYPE trigger;
			// Purpose: 
			//  The type of interaction that triggers the
			//  callback function.
			// (2) std::shared_ptr<PW_FUNCTION> trigger_function;
			// Purpose: 
			//  The function to be triggered once a event is
			//  called.
			// (3) bool play_once;
			// Purpose: 
			//  Should we only play the event once or until the
			//  trigger stops.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			// CORE Function: Event::Trigger_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Triggers the function that the event has on
			//  callback.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Scene_Model
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A template class for Asset models and Actor
		//  models.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Asset_Model
		// //////////////////////////////////////////////////																				 
		// Purpose: 
		//  A non-changing model that does not get updated
		//  frequently.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		// Class Name: pw::st::AAsset_Model
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A non-changing model that does not get updated
		//  frequently and has animations.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Actor_Model
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A changing model that does get updated frequently
		//  .(IE. every frame)
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::AActor_Model
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A changing model that does get updated
		//  frequently with animations. (IE. every frame).
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Scene_Event
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A event that is triggered by a model event
		//  happening within a scene.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		// Class Name: pw::st::Game_Scene
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A class for handling scene drawing and texture
		//  drawing in a scene, as well as sound and other
		//	events.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Load_Shader
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a shader from file.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const std::wstring& file_name;
			// Purpose: 
			//  The file name of the shader. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Compile_Shader
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Complies the shader for use.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) const std::wstring shader_code;
			// Purpose: 
			//  The shader id.
			// (2) GLenum shader_type;
			// Purpose: 
			//  The type of shader, i.e. vertex or fragment. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Check_Error
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Checks if the shader is not correctly made.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) uint32_t object_id;
			// Purpose: 
			//  The shader id.
			// (2) GLenum error;
			// Purpose: 
			//  The type of shader, i.e. vertex or fragment.
			// (3) bool is_program;
			// Purpose: 
			//  The type of shader, i.e. vertex or fragment.
			// (4) const wchar_t* custom_error_msg;
			// Purpose: 
			//  The type of shader, i.e. vertex or fragment. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Shader
		// //////////////////////////////////////////////////																				 
		// Purpose: 
		//  A class for handling the shaders in opengl.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Create_Shader
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a new shader after one has been loaded
			//  from file.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) const std::wstring& vertex_location;
			// Purpose: 
			//  The location of the vertex shader.
			// (2) const std::wstring& fragment_location;
			// Purpose: 
			//  The location of the fragment shader.
			// /////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Use
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Gets the shader ready for use.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Update_Matrices
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Updates the matrices of the model.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) glm::mat4 model;
			// Purpose: 
			//  The model to be updated by the shader. 
			// (2) int32_t& model_is_colored;
			// Purpose: 
			//  Is the model colored or not.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Shader::Update_Projection
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Updates the camera projection.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class: pw::st::Texture
		// //////////////////////////////////////////////////
		// Purpose:
		//  Handles textures in opengl. 
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Texture::Texture
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a uninitialized texture. Will not draw.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Texture::Texture
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a texture from data.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) BYTE* tex_data;
			// Purpose:
			//  The pixel data of the function in a specified
			//  format.
			// (2) uint32_t tex_width;
			// Purpose:
			//  The width of the texture in pixels.
			// (3) uint32_t tex_height;
			// Purpose:
			//  The height of the texture in pixels.
			// (4) int32_t internal_format;
			// Purpose:
			//  The internal format the pixel data is. When
			//  loading the texture using another function not
			//  from Pistonworks make sure to know the internal
			//  format of the data you are loading.
			// (5) int32_t format;
			// Purpose:
			//  The external format of the pixel data. On Windows
			//  it is BGRA usually. Most API's ignore windows 
			//  specific formats and load RGBA. Be careful. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Texture::Texture
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a texture from data.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) BYTE* tex_data;
			// Purpose:
			//  The pixel data of the function in a specified
			//  format.
			// (2) uint32_t target;
			// Purpose:
			//  The type of OpenGL texture you want to create.
			//  Normally it is a GL_TEXTURE_2D.
			// (3) uint32_t tex_width;
			// Purpose:
			//  The width of the texture in pixels.
			// (4) uint32_t tex_height;
			// Purpose:
			//  The height of the texture in pixels.
			// (5) int32_t internal_format;
			// Purpose:
			//  The internal format the pixel data is. When
			//  loading the texture using another function not
			//  from Pistonworks make sure to know the internal
			//  format of the data you are loading.
			// (6) int32_t format;
			// Purpose:
			//  The external format of the pixel data. On Windows
			//  it is BGRA usually. Most API's ignore windows 
			//  specific formats and load RGBA. Be careful. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Texture::Texture
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads a texture from data.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) std::shared_ptr<BYTE*> tex_data;
			// Purpose:
			//  The pixel data of the function in a specified
			//  format.
			// (2) uint32_t tex_width;
			// Purpose:
			//  The width of the texture in pixels.
			// (3) uint32_t tex_height;
			// Purpose:
			//  The height of the texture in pixels.
			// (4) int32_t internal_format;
			// Purpose:
			//  The internal format the pixel data is. When
			//  loading the texture using another function not
			//  from Pistonworks make sure to know the internal
			//  format of the data you are loading.
			// (5) int32_t format;
			// Purpose:
			//  The external format of the pixel data. On Windows
			//  it is BGRA usually. Most API's ignore windows 
			//  specific formats and load RGBA. Be careful. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  : Texture::~Texture
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deallocates the texture memory.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Texture::Bind
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Draws the texture to the screen.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) uint32_t unit;
			// Purpose:
			//  Usually 0. Binds the texture to a grouping to be
			//  rendered by OpenGL. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Texture::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes the allocated memory.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Texture_Structure
		// //////////////////////////////////////////////////
		// Purpose:
		//  A structure that holds many textures or one texture.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Texture_Structure::Texture_Structure
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the class structures.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) st::Texture* p_texture p_animation;
			// Purpose:
			//  Sets the structure so it only has a single
			//  texture.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Texture_Structure::Texture_Structure
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the texture structure.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::vector<st::Texture*> p_textures;
			// Purpose:
			//  The textures to go into the structure.
			// (2) std::vector<std::wstring> p_texture_ids;
			// Purpose:
			//  The id's of the textures in the order of the
			//  textures.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Texture_Structure::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to delete the class structure's and models.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////// //////////////////////////////////////////////////
		//  Struct Name: pw::st::ID_Down_RS_Triangle
		// //////////////////////////////////////////////////
		// Purpose:
		//  Holds the data for a ID_Down_RS_Triangle.
		//    o TOP
		//   oo MIDDLE
		//  ooo BOTTOM
		//  Picture of triangle(o = triangle) 
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Down_RS_Triangle::Handle_Model_Data_NOC
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Down_RS_Triangle::Handle_Model_Data_C
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// (2) glm::vec4 model_color;
			// Purpose:
			//  The color of the mesh and or new color of the
			//  color.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Struct Name: pw::st::ID_Down_LS_Triangle
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  Holds the data for a ID_Down_LS_Triangle.
		//  o   TOP
		//  oo  MIDDLE
		//  ooo BOTTOM
		//  Picture of triangle(o = triangle)
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Down_LS_Triangle::Handle_Model_Data_NOC
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Down_LS_Triangle::Handle_Model_Data_C
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// (2) glm::vec4 model_color;
			// Purpose:
			//  The color of the mesh and or new color of the
			//  color.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Struct Name: pw::st::ID_Up_RS_Triangle
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  Holds the data for a ID_Up_RS_Triangle.
		//  ooo TOP
		//   oo MIDDLE
		//    o BOTTOM
		//  Picture of triangle(o = triangle)
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Up_RS_Triangle::Handle_Model_Data_NOC
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Up_RS_Triangle::Handle_Model_Data_C
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// (2) glm::vec4 model_color;
			// Purpose:
			//  The color of the mesh and or new color of the
			//  color.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Struct Name: pw::st::ID_Up_LS_Triangle
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  Holds the data for a ID_Up_LS_Triangle.
		//  ooo TOP
		//	oo  MIDDLE
		//	o   BOTTOM
		//	Picture of triangle(o = triangle)
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Up_LS_Triangle::Handle_Model_Data_NOC
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Up_LS_Triangle::Handle_Model_Data_C
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// (2) glm::vec4 model_color;
			// Purpose:
			//  The color of the mesh and or new color of the
			//  color.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Struct Name: pw::st::ID_Square
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  Holds the data for a ID_Square.
		//  ooo TOP
		//  ooo MIDDLE
		//  ooo BOTTOM
		//  Picture of square(o = square)
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Square::Handle_Model_Data_NOC
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: ID_Square::Handle_Model_Data_C
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates the mesh for non-colored models.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) Dynamic_Mesh*& model_mesh;
			// Purpose:
			//  The mesh that needs to be created.
			// (2) glm::vec4 model_color;
			// Purpose:
			//  The color of the mesh and or new color of the
			//  color.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Enum Name: pw::st::Model_Types
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A structure that holds model type identifiers.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Model
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A structure that ties static model's and dynamic
		//  models together.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Static_Model
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A structure that holds all data for a model. Does
		//  not update.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Static_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Initializes the static model information.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Static_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a full static model, only
			//  updates once it is created and nevermore until
			//  window resize.
			//  Variation: NO-COLOR 
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (3) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (4) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (5) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Static_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a colored static model that only
			//  updates once it is created. May be updated on
			//  resize.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (3) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (4) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (5) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// (6) glm::vec4 model_color;
			// Purpose:
			//  The color of the model. RGBA.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Static_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a full static model, only
			//  updates once it is created and nevermore until
			//  window resize.
			//  Variation: NO-COLOR 
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Vertex_Data* mesh_info;
			// Purpose:
			//  Specific non-engine data given to a mesh.
			// (3) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (4) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (5) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (6) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Static_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a colored static model that only
			//  updates once it is created. May be updated on
			//  resize. 
			// //////////////////////////////////////////////////
			// Parameters: 7
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Vertex_Data* mesh_info;
			// Purpose:
			//  Specific non-engine data given to a mesh.
			// (3) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (4) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (5) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (6) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// (7) glm::vec4 model_color;
			// Purpose:
			//  The color of the model. RGBA.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::~Static_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deallocates all of the static model memory. 
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Renders the static model to the screen. 
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes active memory allocated for the model.
			//  Will not fully delete all memory until scope.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Refresh_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Refreshes the model when the window is resized.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Static_Model::Handle_Calculations
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Calculates the position of the model.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Dynamic_Model
		// //////////////////////////////////////////////////																				 
		// Purpose: 
		//  A structure that holds all data for a
		//  model. Updates frequently.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Dynamic_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a uninitialized Dynamic Model, with
			//  default values.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Dynamic_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a un-colored dynamic model. Updated
			//  every frame.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (3) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (4) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (5) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Dynamic_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a colored dynamic model. Updates every
			//  frame.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (3) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (4) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (5) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// (6) glm::vec4 model_color;
			// Purpose:
			//  The color of the model. RGBA.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Dynamic_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a un-colored dynamic model. Updated every
			//  frame.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Vertex_Data* mesh_info;
			// Purpose:
			//  Specific non-engine data given to a mesh.
			// (3) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (4) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (5) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (6) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Dynamic_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a colored dynamic model. Updates every
			//  frame.
			// //////////////////////////////////////////////////
			// Parameters: 7
			// (1) Geometry_Types type;
			// Purpose:
			//  The type of model to be created.
			// (2) Vertex_Data* mesh_info;
			// Purpose:
			//  Specific non-engine data given to a mesh.
			// (3) Texture* texture;
			// Purpose:
			//  The texture for the model.
			// (4) glm::vec2 model_position;
			// Purpose:
			//  The in-game 2D coordinates of the top left of the
			// model.
			// (5) float model_rotation;
			//  The rotation of the model around its z-axis.
			//  Range(0.0f : 360.0f)
			// (6) glm::vec2 model_size;
			// Purpose:
			//  The size in screen pixels of the model in the 
			//  x and y direction.
			// (7) glm::vec4 model_color;
			// Purpose:
			//  The color of the model. RGBA.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::~Dynamic_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deallocates all memory used in the structure. 
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Renders the dynamic model to the screen. 
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Renders a dynamic model that is tied to a
			//  physics object.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) b2Body* model_body;
			// Purpose:
			//  The physics body of the model.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes all memory allocated for this model.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Refresh_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Reloads the model. Called automatically on resize
			//	.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Handle_Calculations
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Converts engine screen information to world info.
			//  Called on refresh.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) bool dynamic_override;
			// Purpose: 
			//  The variable forces the re-calculation of the 
			//  models coords.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Handle_Calculations
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Converts engine screen information to world info.
			//  Called if the dynamic model has a physics body.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) b2Body* model_body;
			// Purpose: 
			//  The physics body tied to the model.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Dynamic_Model::Handle_Calculations
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Converts engine screen information to world info.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Actor
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A changing model that does get updated frequently
		//  .(IE. every frame)
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Actor
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the class structures.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Actor
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the class structures
			//  and initialize the model contained within.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) std::shared_ptr<Model> model;
			// Purpose:
			//  The model to be used.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Asset_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize all class structures to
			//  a given model and default structures.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::shared_ptr<Model> model;
			// Purpose:
			//  The model to be used.
			// (2) PW_SRD_PTR(Text) text;
			// Purpose:
			//  The text that will be displayed.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Asset_Model
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize all class structures to
			//  a given model and default structures.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::shared_ptr<Model> model;
			// Purpose:
			//  The model to be used.
			// (2) st::Texture_Structure* p_multi_texture;
			// Purpose:
			//  The textures for the multi-texture.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Actor
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize the actor's model and
			//  animation.
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) std::shared_ptr<Model> model;
			// Purpose:
			//  The model to be used for the structure. 
			// (2) std::vector<std::shared_ptr<st::Animation>> p_animations;
			// Purpose:
			//  The animations to go into the structure.
			// (3) std::vector<std::wstring> p_animation_ids;
			// Purpose:
			//  The id's of the animation in the order of the
			//  animations.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to draw the model information to
			//  the screen.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Model_Identifier
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to find the type of model.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Increment_ID_Index
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to increment the global id by 1.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Increment_ID_Index
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Returns the current global id from the
			//  actor class. This global id is incremented
			//  per new event.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
			
			// //////////////////////////////////////////////////
			//  Function: Actor::Run_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to update animation information
			//  and change model texture information accordantly.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Advance_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Forces the animation to the next frame.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Start_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Makes the animation start to animate.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Stop_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Stops the animation from animating. Can still be
			//  advanced manually.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Change_Animation
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Stops the animation from animating. Can still be
			//  advanced manually.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) const std::wstring&& p_animation_id;
			// Purpose:
			//  The Id of the other animation to change to.
			// (2) bool reset;
			// Purpose:
			//  Should we reset the animation when we change it.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Actor::Model_Identifier
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to find the type of model.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Scene_Event
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A event that is triggered by a model event
		//  happening within a scene.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Scene_Event::Scene_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize all scene event
			//  structures and variables.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::shared_ptr<Actor> model_pointer;
			// Purpose:
			//  The pointer to the model that the event triggers
			//  from.
			// (2) st::Event model_event;
			// Purpose:
			//  The event that will trigger upon a action.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Scene_Event::~Scene_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to deallocate all memory used 
			//  by this class.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Scene_Event::Run_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used when the event is trigger is some
			//  sort of way. This is determined by the Game_Scene
			//  class.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// A sub-scene structure is one that
		// is not currently rendered along with
		// the rest of the main scene
// //////////////////////////////////////////////////
		// Class Name: pw::st::Game_Scene
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A class for handling scene drawing and texture
		//  drawing in a scene, as well as sound and other
		//	events.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Game_Scene
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize a scene.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Game_Scene
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to initialize a scene.
			// //////////////////////////////////////////////////
			// Parameters: 7
			// (1) const wchar_t* scene_name;
			// Purpose:
			//  The name of the scene.
			// (2) std::vector<std::shared_ptr<Actor>> scene_models;
			// Purpose:
			//  The models within the scene.
			// (3) std::vector<std::shared_ptr<Actor>> collision_models;
			// Purpose:
			//  A vector of pointers to actor models that can collide.
			// (4) co::Engine_Input* scene_input;
			// Purpose:
			//  The input structure that controls the scene's input.
			// (5) std::map<PW_EVENT_ID, std::map<PW_BUTTON_CODE, std::map<PW_STATE, Scene_Event>>> scene_events;
			// Purpose:
			//  The events that the scene has.
			// (6) std::vector<std::shared_ptr<Scene_Event>> current_scene_events;
			// Purpose:
			//  The current scene events that are currently active.
			// (7) Physics_Factory* scene_physics;
			// Purpose:
			//  The physics structure that controls physics for 
			//  the scene.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::~Game_Scene
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to deallocate scenes and get rid of memory.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  Function: Game_Scene::Pre_Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Updates render information before render.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to draw all members on to a screen.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to delete all of the related members
			//  within the scene and then delete the scene itself
			// .
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Refresh_Scene
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to refresh all of the scene members when
			//  ever the engine is updated.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Create_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to create an event that is tied to a model
			//  and triggers a function when it happens.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) PW_EVENT_ID event_type;
			// Purpose:
			//  The id of the pw event type.
			// (2) PW_BUTTON_CODE button;
			// Purpose:
			//  The button that has to be pressed in order for
			//  the event to trigger.
			// (3) PW_STATE state;
			// Purpose:
			//  The state of the button in order to trigger the
			//  event.
			// (4) Actor* model_pointer;
			// Purpose:
			//  A pointer to the model that has to be interacted
			//  with.
			// (5) std::shared_ptr<std::function<type(args...)>> trigger_function;
			// Purpose:
			//  The function that will be triggered on event
			//  trigger.
			// (6) bool play_once;
			// Purpose:
			//  Should the event be triggered continuously until
			//  the opposite trigger is activated. 
			// (7) args... p_arguments;
			// Purpose:
			//  The arguments for the function to be triggered. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Create_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Used to create an event that is tied to a model
			//  and triggers a function when it happens.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) PW_EVENT_ID event_type;
			// Purpose:
			//  The id of the pw event type.
			// (2) PW_BUTTON_CODE button;
			// Purpose:
			//  The button that has to be pressed in order for
			//  the event to trigger.
			// (3) PW_STATE state;
			// Purpose:
			//  The state of the button in order to trigger the
			//  event.
			// (4) Actor* model_pointer;
			// Purpose:
			//  A pointer to the model that has to be interacted
			//  with.
			// (5) std::shared_ptr<std::function<type(args...)>> trigger_function;
			// Purpose:
			//  The function that will be triggered on event
			//  trigger.
			// (6) bool play_once;
			// Purpose:
			//  Should the event be triggered continuously until
			//  the opposite trigger is activated. 
			// (7) args... p_arguments;
			// Purpose:
			//  The arguments for the function to be triggered. 
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Activate_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Activates a event if the present information is
			//  correct.
			// //////////////////////////////////////////////////
			// Parameters: 3
			// (1) PW_EVENT_ID event_type;
			// Purpose:
			//  The id of the pw event type.
			// (2) PW_BUTTON_CODE button;
			// Purpose:
			//  The button that has to be pressed in order for
			//  the event to trigger.
			// (3) PW_STATE state;
			// Purpose:
			//  The state of the button in order to trigger the
			//  event.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Activate_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  A special function overload for collisions. 
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::shared_ptr<st::Actor> collider;
			// Purpose:
			//  Is the model that is colliding with another.
			// (2) std::shared_ptr<st::Actor> object;
			// Purpose:
			// 	Is the model being collided with.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Activate_Event
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Activates a event if the present information is
			//  correct.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) std::wstring s_id;
			// Purpose:
			//  The new s_id to be tested.
			// (2) std::shared_ptr<Actor> model;
			// Purpose:
			//  The model to register the id to.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Get_Box
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Returns the box that the model takes up.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) Actor* p_model;
			// Purpose:
			//  The model to get the box from.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Re_Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Sets the first render parameter to true.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Game_Scene::Re_Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Captures where the current camera position is
			//  for when the scene is re-rendered later.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) glm::vec2 camera_position;
			// Purpose:
			//  The camera's current position.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Enum: pw::st::Font
		// //////////////////////////////////////////////////
		// Purpose:
		//  Handles loading of text within the engine.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		// INTERNAL_DATA_API Class Name: pw::st::Character
		// //////////////////////////////////////////////////
		// Purpose:
		//  Holds character texture information.
		// //////////////////////////////////////////////////

// //////////////////////////////////////////////////
			//  Function: Character::Character
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a character object that holds the
			//  character texture data and the character it
			//  represents.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) wchar_t type;
			// Purpose: 
			//  The type of character.
			// (2) std::shared_ptr<BYTE*> character_data;
			// Purpose: 
			//  The font data / texture data of the character.
			// (3) glm::ivec2 character_size;
			// Purpose: 
			//  The size of the character.
			// (4) glm::ivec2 baseline_offset;
			// Purpose: 
			//  The position that the character would be in.
			// (5) uint32_t spacing;
			// Purpose: 
			//  The space between two characters.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Character::Character
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a character object that holds the
			//  character texture data and the character it
			//  represents.
			// //////////////////////////////////////////////////
			// Parameters: 5
			// (1) wchar_t type;
			// Purpose: 
			//  The type of character.
			// (2) BYTE* character_data;
			// Purpose: 
			//  The font data / texture data of the character.
			// (3) glm::ivec2 character_size;
			// Purpose: 
			//  The size of the character.
			// (4) glm::ivec2 baseline_offset;
			// Purpose: 
			//  The position that the character would be in.
			// (5) uint32_t spacing;
			// Purpose: 
			//  The space between two characters.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Character::~Character
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Cleans up character data, does not delete
			//  allocated memory of character data.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Text
		// //////////////////////////////////////////////////
		// Purpose: 
		//  Holds a vector of characters.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text::Text
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a vector of character objects to be drawn
			//  as a line of text.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			//  The type of loaded engine font to use.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text_Renderer::Create_Character
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a character from a font and returns
			//  it to the user.
			// //////////////////////////////////////////////////
			// Parameters: 2
			// (1) wchar_t letter_type;
			// Purpose: 
			//  The character to be created.
			// (2) Font font_type;
			// Purpose: 
			//  The type of loaded engine font to use.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text_Renderer::Delete_Engine_Font
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes the characters in each font.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text_Renderer::Load_Engine_Font
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Loads the engine font that are built in.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::ie::Text_Renderer
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text::Render
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Renders the line of text.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text::~Text
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Cleans up text data.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Text::Text
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a vector of character objects to be drawn
			//  as a line of text.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) std::wstring text;
			// Purpose: 
			//  The text to be drawn to the screen.
			// (2) glm::ivec2 position;
			// Purpose: 
			//  The position of the left most character.
			// (3) glm::ivec2 size;
			// Purpose: 
			//  The size of the character string.
			// (4) glm::vec4 color;
			// Purpose: 
			//  The color of the text.
			// (5) PW_MODEL_TYPE model_type;
			// Purpose: 
			//  The type of model you want to use for the text.
			// (6) Font font_type;
			// Purpose: 
			//  The type of loaded engine font to use.
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  Function: Text::Text
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a vector of character objects to be drawn
			//  as a line of text.
			// //////////////////////////////////////////////////
			// Parameters: 6
			// (1) const wchar_t* text;
			// Purpose: 
			//  The text to be drawn to the screen.
			// (2) glm::ivec2 position;
			// Purpose: 
			//  The position of the left most character.
			// (3) glm::ivec2 size;
			// Purpose: 
			//  The size of the character string.
			// (4) glm::vec4 color;
			// Purpose: 
			//  The color of the text.
			// (5) PW_MODEL_TYPE model_type;
			// Purpose: 
			//  The type of model you want to use for the text.
			// (6) Font font_type;
			// Purpose: 
			//  The type of loaded engine font to use.
			// //////////////////////////////////////////////////
			
		// Purpose:
		//  Handles loading of text within the engine.
		// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
		//  Class Name: pw::st::Physics_Object
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  An object that has physics in the Box2D API.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Object::Physics_Object
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates a physics object tied to a model.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) std::shared_ptr<Model> model;
			// Purpose: 
			//  The model to integrate physics.
			// (2) b2BodyType type;
			// Purpose: 
			//  The type of physics object.
			// (3) b2World* world;
			// Purpose: 
			//  A pointer to the world in which this object will
			//  live.
			// (4) bool is_fixed;
			// Purpose: 
			//  Can the character be able to be rotated.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Object::~Physics_Object
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deallocates all the memory of the object.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
			// //////////////////////////////////////////////////
			//  Function: Physics_Object::Delete
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deletes the allocated information with the
			//  structure.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Object::X_Pixels_Position
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Returns the position in screen coordinates scaled
			//  by a scale factor. To get accurate position use
			//  PW_SCALE_FACTOR as your scale factor.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) int32_t scale_factor;
			// Purpose:
			//  Define what the engine should use as a standard
			//  tile.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Object::Y_Pixels_Position
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Returns the position in screen coordinates scaled
			//  by a scale factor. To get accurate position use
			//  PW_SCALE_FACTOR as your scale factor.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) int32_t scale_factor;
			// Purpose:
			//  Define what the engine should use as a standard
			//  tile.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
		//  Class Name: pw::st::Physics_Factory
		// //////////////////////////////////////////////////																				 
		// Purpose:
		//  A factory for creation and running of the world.
		// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Factory::Physics_Factory
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates an empty Box2D factory.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Factory::Physics_Factory
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Creates an empty Box2D factory.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) b2Vec2 gravity;
			// Purpose: 
			//  The gravity the pulls downwards on the dynamic
			//  objects. The units is x,y m/s/s
			//  1m/s/s       = 32px/s/s
			//  0.03125m/s/s = 1px/s/s
			// (2) int32_t velocity_it;
			// Purpose: 
			//  The amount of velocity iterations.
			// (3) int32_t position_it;
			// Purpose: 
			//  The amount of position iterations.
			// (4) float time_step;
			// Purpose: 
			//  The max fps of the game screen.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Factory::~Physics_Factory
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Deallocates memory for the factory.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Factory::Run
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Does mathematical calculations for the physics
			//  simulation.
			// //////////////////////////////////////////////////
			// Parameters: NONE
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Factory::Add_Object
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Adds an Physics_Object to the factory.
			// //////////////////////////////////////////////////
			// Parameters: 4
			// (1) std::shared_ptr<Model> model;
			// Purpose: 
			//  The model which will be added.
			// (2) b2BodyType type;
			// Purpose: 
			//  The type of model to be added.
			// (3) PW_ID object_id;
			// Purpose: 
			//  The id of the physics object.
			// (4) bool is_fixed;
			// Purpose: 
			//  Will this object rotate when colliding.
			// //////////////////////////////////////////////////
// //////////////////////////////////////////////////
			//  Function: Physics_Factory::Access_Memeber
			// //////////////////////////////////////////////////
			// Purpose: 
			//  Returns a pointer to a physics object with the
			//  given id. Returns nullptr if not found.
			// //////////////////////////////////////////////////
			// Parameters: 1
			// (1) PW_ID id;
			// Purpose: 
			//  The id of the Physics_Object you want to access.
			//  Returns nullptr if it does not find the object.
			// //////////////////////////////////////////////////
			